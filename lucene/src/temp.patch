diff --git a/src/main/perf/LocalTaskSource.java b/src/main/perf/LocalTaskSource.java
index 36b17f0..88951f4 100644
--- a/src/main/perf/LocalTaskSource.java
+++ b/src/main/perf/LocalTaskSource.java
@@ -125,7 +125,7 @@ class LocalTaskSource implements TaskSource {
   }
 
   @Override
-  public void taskDone(Task task, long queueTimeNS, int toalHitCount) {
+  public void taskDone(Task task, long queueTimeNS, long processTimeNS, int toalHitCount) {
   }
 
   static List<Task> loadTasks(TaskParser taskParser, String filePath) throws IOException, ParseException {
@@ -151,5 +151,5 @@ class LocalTaskSource implements TaskSource {
     taskFile.close();
     return tasks;
   }
-  
+
 }
diff --git a/src/main/perf/NRTPerfTest.java b/src/main/perf/NRTPerfTest.java
index 61634a3..405427b 100644
--- a/src/main/perf/NRTPerfTest.java
+++ b/src/main/perf/NRTPerfTest.java
@@ -211,13 +211,13 @@ public class NRTPerfTest {
 		}
 
 		@Override
-		public void taskDone(Task task, long queueTimeNS, int toalHitCount) {}
+		public void taskDone(Task task, long queueTimeNS, long processTimeNS, int toalHitCount) {}
 	}
 
 	static final AtomicInteger currentQT = new AtomicInteger();
 	static AtomicInteger[] docsIndexedByTime;
 	static AtomicInteger[] searchesByTime;
-	static AtomicLong[] totalUpdateTimeByTime; 
+	static AtomicLong[] totalUpdateTimeByTime;
 	static int statsEverySec;
 
 	public static void main(String[] args) throws Exception {
@@ -382,14 +382,14 @@ public class NRTPerfTest {
 		TaskParser taskParser = new TaskParser(indexState, qp, field, 10, random, true);
 		final TaskSource tasks = new RandomTaskSource(taskParser, tasksFile, random) {
 			@Override
-			public void taskDone(Task task, long queueTimeNS, int toalHitCount) {
+			public void taskDone(Task task, long queueTimeNS, long processTimeNS, int toalHitCount) {
 				searchesByTime[currentQT.get()].incrementAndGet();
 			}
 		};
 		System.out.println("Task repeat count 1");
 		System.out.println("Tasks file " + tasksFile);
 		System.out.println("Num task per cat 20");
-		final TaskThreads taskThreads = new TaskThreads(tasks, indexState, numSearchThreads);
+		final TaskThreads taskThreads = new TaskThreads(tasks, indexState, numSearchThreads,0);
 
 		final ReopenThread reopenThread = new ReopenThread(reopenPerSec, manager, reopensByTime, runTimeSec);
 		reopenThread.setName("ReopenThread");
@@ -426,8 +426,8 @@ public class NRTPerfTest {
 						other = "";
 					}
 					int prev = prevQT - 1;
-					System.out.println(String.format("QT %d searches=%d docs=%d reopens=%s totUpdateTime=%d", 
-							prev, 
+					System.out.println(String.format("QT %d searches=%d docs=%d reopens=%s totUpdateTime=%d",
+							prev,
 							searchesByTime[prev].get(),
 							docsIndexedByTime[prev].get(),
 							reopensByTime[prev].get() + other,
@@ -443,7 +443,7 @@ public class NRTPerfTest {
 
 		System.out.println("By time:");
 		for (int i = 0; i < searchesByTime.length - 2; i++) {
-			System.out.println(String.format("  %d searches=%d docs=%d reopens=%d totUpdateTime=%d", 
+			System.out.println(String.format("  %d searches=%d docs=%d reopens=%d totUpdateTime=%d",
 					i*statsEverySec,
 					searchesByTime[i].get(),
 					docsIndexedByTime[i].get(),
diff --git a/src/main/perf/RemoteTaskSource.java b/src/main/perf/RemoteTaskSource.java
index 01deac0..4c17b4d 100644
--- a/src/main/perf/RemoteTaskSource.java
+++ b/src/main/perf/RemoteTaskSource.java
@@ -1,7 +1,7 @@
 package perf;
 
 /**
- * Licensed to the Apache Software Foundation (ASF) under one or more
+ * perf to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
@@ -30,26 +30,32 @@ import java.util.Locale;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;
 
+import perf.Affinity;
+
 // Serves up tasks from remote client
 class RemoteTaskSource extends Thread implements TaskSource {
   private final ServerSocket serverSocket;
   private final TaskParser taskParser;
   private final int numThreads;
-  private static final int MAX_BYTES = 70;
+  private final int cpuAffinityBase;
+  private static final int MAX_BYTES = 40;
+    private final boolean nodelay_sock;
 
   // nocommit maybe fair=true?
   private final BlockingQueue<Task> queue = new ArrayBlockingQueue<Task>(100000);
 
-  public RemoteTaskSource(String iface, int port, int numThreads, TaskParser taskParser) throws IOException {
+    public RemoteTaskSource(String iface, int port, int numThreads, TaskParser taskParser, int cpuAffinity, boolean nodelay_sock) throws IOException {
     this.numThreads = numThreads;
     this.taskParser = taskParser;
+    this.cpuAffinityBase = cpuAffinity;
+    this.nodelay_sock = nodelay_sock;
     serverSocket = new ServerSocket(port, 50, InetAddress.getByName(iface));
     System.out.println("Waiting for client connection on interface " + iface + ", port " + port);
     setPriority(Thread.MAX_PRIORITY);
     setDaemon(true);
     start();
   }
-  
+
   @Override
   public List<Task> getAllTasks() {
     return null;
@@ -61,13 +67,24 @@ class RemoteTaskSource extends Thread implements TaskSource {
   public void run() {
     // Start server socket and accept only one client
     // connection, which will feed us the requests:
-
+    System.out.println("RemoteTaskSource is running, pin itself on CPU" + this.numThreads);
+    if (cpuAffinityBase != -1)
+	Affinity.setCPUAffinity(this.numThreads + this.cpuAffinityBase);
+    String[] eventNames = {"INSTRUCTION_RETIRED","UNHALTED_CORE_CYCLES"};
+//    String[] eventNames = {"INSTRUCTION_RETIRED","INSTRUCTION_RETIRED:k"};
+    Affinity.createEvents(eventNames);
     newClient: while(true) {
+      //reset the flag
+      Affinity.postSignal(-1,-1,this.numThreads);
       Socket socket = null;
       InputStream in;
       try {
         System.out.println("  ready for client...");
         socket = serverSocket.accept();
+	if (this.nodelay_sock == true)
+	{
+	    socket.setTcpNoDelay(true);
+	}
         in = socket.getInputStream();
         out = socket.getOutputStream();
       } catch (IOException ioe) {
@@ -108,23 +125,35 @@ class RemoteTaskSource extends Thread implements TaskSource {
           }
 
           String s = new String(buffer, "UTF-8");
-          if (s.startsWith("END//")) {
-            for(int threadID=0;threadID<numThreads;threadID++) {
-              queue.put(Task.END_TASK);
-            }
-            break;
-          }
+	  if (s.startsWith("#dummy")){
+	      continue;
+	  }
+
+          // if (s.startsWith("END//")) {
+          //   for(int threadID=0;threadID<numThreads;threadID++) {
+          //     queue.put(Task.END_TASK);
+          //   }
+          //   break;
+          // }
+	  // id;type; term
+	  String[] stuple = s.split(";");
+	  //	  System.out.println("Receive Task " + s);;
+	  String taskString = stuple[1];
           Task task;
           try {
-            task = taskParser.parseOneTask(s);
+            task = taskParser.parseOneTask(taskString);
           } catch (RuntimeException re) {
             re.printStackTrace();
             continue;
           }
+	  task.taskID = Integer.parseInt(stuple[0].replaceAll("\\s","").trim());
           task.recvTimeNS = System.nanoTime();
-          task.taskID = taskCount++;
+	  //          task.taskID = taskCount++;
+	  //enqueue task.taskID
+	  Affinity.postSignal(1,task.taskID,this.numThreads);
           queue.put(task);
-          //System.out.println("S: add " + s + "; size=" + queue.size());
+	  //	  Affinity.postEnqueSignal();
+	  //	  System.out.println("S: add " + task.taskID + ":" + taskString + "; size=" + queue.size() + "; socket=" + in.available());
         }
       } catch (Exception e) {
         throw new RuntimeException(e);
@@ -138,12 +167,14 @@ class RemoteTaskSource extends Thread implements TaskSource {
   }
 
   @Override
-  public void taskDone(Task task, long queueTimeNS, int totalHitCount) throws IOException {
+  public void taskDone(Task task, long queueTimeNS, long processTimeNS, int totalHitCount) throws IOException {
     if (out != null) {
       try {
         // NOTE: can cause NPE here (we are not sync'd)
         // but caller will print & ignore it...
-        out.write(String.format(Locale.ENGLISH, "%8d:%9d:%11.1f", task.taskID, totalHitCount, queueTimeNS/1000000.0).getBytes("UTF-8"));
+	synchronized(out){
+	  out.write(String.format(Locale.ENGLISH, "%8d:%9d:%16d:%16d", task.taskID, totalHitCount, queueTimeNS, processTimeNS).getBytes("UTF-8"));
+	}
       } catch (SocketException se) {
         System.out.println("Ignore SocketException: " + se);
         queue.clear();
@@ -152,5 +183,24 @@ class RemoteTaskSource extends Thread implements TaskSource {
       }
     }
   }
-}
 
+  public void taskReport(Task task, int totalHitCount, long receiveTime, long processTime, long finishTime, long ins, long cycles) throws IOException {
+    if (out != null) {
+      try {
+        // NOTE: can cause NPE here (we are not sync'd)
+        // but caller will print & ignore it...
+	  //	long t1 = System.nanoTime();
+	  synchronized(out){
+	      out.write(String.format(Locale.ENGLISH, "%8d:%9d:%16d:%16d:%16d:%16d:%16d", task.taskID, totalHitCount, receiveTime, processTime-receiveTime, finishTime-receiveTime, ins, cycles).getBytes("UTF-8"));}
+	//	long t2 = System.nanoTime();
+	//	long writeLatency = t2 - t1;
+	//	System.out.println(task.taskID + ":"  + writeLatency);
+      } catch (SocketException se) {
+        System.out.println("Ignore SocketException: " + se);
+        queue.clear();
+      } catch (UnsupportedEncodingException uee) {
+        throw new RuntimeException(uee);
+      }
+    }
+  }
+}
diff --git a/src/main/perf/SearchPerfTest.java b/src/main/perf/SearchPerfTest.java
index 7d8f6b3..c0f92d6 100644
--- a/src/main/perf/SearchPerfTest.java
+++ b/src/main/perf/SearchPerfTest.java
@@ -76,6 +76,7 @@ import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.Version;
 
 import perf.IndexThreads.Mode;
+import perf.Affinity;
 
 // TODO
 //   - post queries on pao
@@ -113,13 +114,13 @@ public class SearchPerfTest {
     protected boolean tryIncRef(IndexSearcher ref) {
       return ref.getIndexReader().tryIncRef();
     }
-    
+
     @Override
     protected int getRefCount(IndexSearcher ref) {
     	return ref.getIndexReader().getRefCount();
     }
   }
-  
+
   public static void main(String[] clArgs) throws Exception {
 
     StatisticsHelper stats = new StatisticsHelper();
@@ -142,6 +143,8 @@ public class SearchPerfTest {
     final String dirImpl = args.getString("-dirImpl");
 
     OpenDirectory od = OpenDirectory.get(dirImpl);
+    Affinity.initPerf();
+    Affinity.initSignal();
 
     /*
     } else if (dirImpl.equals("NativePosixMMapDirectory")) {
@@ -161,7 +164,7 @@ public class SearchPerfTest {
       postingsExtensions.add("prx");
       postingsExtensions.add("tip");
       postingsExtensions.add("tim");
-      
+
       ramDir =  new RAMDirectory();
       Directory fsDir = new MMapDirectory(new File(dirPath));
       for (String file : fsDir.listAll()) {
@@ -211,7 +214,7 @@ public class SearchPerfTest {
     // TODO: this could be way better.
     final String similarity = args.getString("-similarity");
     // now reflect
-    final Class<? extends Similarity> simClazz = 
+    final Class<? extends Similarity> simClazz =
       Class.forName("org.apache.lucene.search.similarities." + similarity).asSubclass(Similarity.class);
     final Similarity sim = simClazz.newInstance();
 
@@ -222,7 +225,7 @@ public class SearchPerfTest {
     System.out.println("topN " + topN);
     System.out.println("JVM " + (Constants.JRE_IS_64BIT ? "is" : "is not") + " 64bit");
     System.out.println("Pointer is " + RamUsageEstimator.NUM_BYTES_OBJECT_REF + " bytes");
- 
+
     final Analyzer a;
     if (analyzer.equals("EnglishAnalyzer")) {
       a = new EnglishAnalyzer();
@@ -237,7 +240,7 @@ public class SearchPerfTest {
                                      2, 2, ShingleFilter.DEFAULT_TOKEN_SEPARATOR, true, true, ShingleFilter.DEFAULT_FILLER_TOKEN);
     } else {
       throw new RuntimeException("unknown analyzer " + analyzer);
-    } 
+    }
 
     final ReferenceManager<IndexSearcher> mgr;
     final IndexWriter writer;
@@ -278,7 +281,7 @@ public class SearchPerfTest {
       if (verbose) {
         InfoStream.setDefault(new PrintStreamInfoStream(System.out));
       }
-      
+
       if (!dirImpl.equals("RAMDirectory") && !dirImpl.equals("RAMExceptDirectPostingsDirectory")) {
         System.out.println("Wrap NRTCachingDirectory");
         dir0 = new NRTCachingDirectory(dir0, 20, 400.0);
@@ -297,7 +300,7 @@ public class SearchPerfTest {
         // Let IW remove files only referenced by starting commit:
         iwc.setIndexDeletionPolicy(new KeepNoCommitsDeletionPolicy());
       }
-      
+
       if (commit != null && commit.length() > 0) {
         System.out.println("Opening writer on commit=" + commit);
         iwc.setIndexCommit(PerfUtils.findCommitPoint(commit, dir));
@@ -334,7 +337,7 @@ public class SearchPerfTest {
             System.out.println("warm segment=" + reader + " numDocs=" + reader.numDocs() + ": took " + (t1-t0) + " msec");
           }
         });
-      
+
       writer = new IndexWriter(dir, iwc);
       System.out.println("Initial writer.maxDoc()=" + writer.maxDoc());
 
@@ -420,7 +423,7 @@ public class SearchPerfTest {
       s.setQueryCache(null); // don't bench the cache
       s.setSimilarity(sim);
       System.out.println("maxDoc=" + reader.maxDoc() + " numDocs=" + reader.numDocs() + " %tg deletes=" + (100.*reader.maxDoc()/reader.numDocs()));
-      
+
       mgr = new SingleIndexSearcher(s);
     }
 
@@ -506,7 +509,7 @@ public class SearchPerfTest {
     TaskParser taskParser = new TaskParser(indexState, queryParser, fieldName, topN, staticRandom, doStoredLoads);
 
     final TaskSource tasks;
-
+    final int cpuAffinity = args.getInt("-cpuAffinity");
     if (tasksFile.startsWith("server:")) {
       int idx = tasksFile.indexOf(':', 8);
       if (idx == -1) {
@@ -514,7 +517,12 @@ public class SearchPerfTest {
       }
       String iface = tasksFile.substring(7, idx);
       int port = Integer.valueOf(tasksFile.substring(1+idx));
-      RemoteTaskSource remoteTasks = new RemoteTaskSource(iface, port, searchThreadCount, taskParser);
+      boolean socket_option = false;
+      if (args.hasArg("-nodelay"))
+      {
+	  socket_option = true;
+      }
+      RemoteTaskSource remoteTasks = new RemoteTaskSource(iface, port, searchThreadCount, taskParser, cpuAffinity, socket_option);
 
       // nocommit must stop thread?
       tasks = remoteTasks;
@@ -528,12 +536,13 @@ public class SearchPerfTest {
       System.out.println("Num task per cat " + numTaskPerCat);
     }
 
-    args.check();
+    //    args.check();
 
     // Evil respeller:
     //spellChecker.setMinPrefix(0);
     //spellChecker.setMaxInspections(1024);
-    final TaskThreads taskThreads = new TaskThreads(tasks, indexState, searchThreadCount);
+    // pin working threads start from `cpuAffinity`
+    final TaskThreads taskThreads = new TaskThreads(tasks, indexState, searchThreadCount, cpuAffinity);
     Thread.sleep(10);
 
     final long startNanos = System.nanoTime();
diff --git a/src/main/perf/TaskSource.java b/src/main/perf/TaskSource.java
index 96cec1f..40d19a7 100644
--- a/src/main/perf/TaskSource.java
+++ b/src/main/perf/TaskSource.java
@@ -22,7 +22,6 @@ import java.util.List;
 
 interface TaskSource {
   public Task nextTask() throws InterruptedException;
-  public void taskDone(Task task, long queueTimeNS, int totalHitCount) throws IOException;
+  public void taskDone(Task task, long queueTimeNS, long processTimeNS, int totalHitCount) throws IOException;
   public List<Task> getAllTasks();
 }
-
diff --git a/src/main/perf/TaskThreads.java b/src/main/perf/TaskThreads.java
index 7fde48f..73e4f2c 100644
--- a/src/main/perf/TaskThreads.java
+++ b/src/main/perf/TaskThreads.java
@@ -20,20 +20,24 @@ package perf;
 import java.io.IOException;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicBoolean;
+import perf.Affinity;
 
-public class TaskThreads {  
+
+public class TaskThreads {
 
 	private final Thread[] threads;
+    private final int cpuAffinityBase;
 	final CountDownLatch startLatch = new CountDownLatch(1);
 	final CountDownLatch stopLatch;
 	final AtomicBoolean stop;
 
-	public TaskThreads(TaskSource tasks, IndexState indexState, int numThreads) {
+    public TaskThreads(TaskSource tasks, IndexState indexState, int numThreads, int cpuAffinity) {
 		threads = new Thread[numThreads];
 		stopLatch = new CountDownLatch(numThreads);
 		stop = new AtomicBoolean(false);
+		cpuAffinityBase = cpuAffinity;
 		for(int threadIDX=0;threadIDX<numThreads;threadIDX++) {
-			threads[threadIDX] = new TaskThread(startLatch, stopLatch, stop, tasks, indexState, threadIDX);
+		    threads[threadIDX] = new TaskThread(startLatch, stopLatch, stop, tasks, indexState, threadIDX, cpuAffinityBase);
 			threads[threadIDX].start();
 		}
 	}
@@ -60,18 +64,42 @@ public class TaskThreads {
 		private final TaskSource tasks;
 		private final IndexState indexState;
 		private final int threadID;
+	    private final int cpuAffinity;
 
-		public TaskThread(CountDownLatch startLatch, CountDownLatch stopLatch, AtomicBoolean stop, TaskSource tasks, IndexState indexState, int threadID) {
+	    public TaskThread(CountDownLatch startLatch, CountDownLatch stopLatch, AtomicBoolean stop, TaskSource tasks, IndexState indexState, int threadID, int cpuAffinity) {
 			this.startLatch = startLatch;
 			this.stopLatch = stopLatch;
 			this.stop = stop;
 			this.tasks = tasks;
 			this.indexState = indexState;
 			this.threadID = threadID;
+			this.cpuAffinity = cpuAffinity;
 		}
 
 		@Override
 		public void run() {
+		  if (cpuAffinity == -1)
+		      {
+			  System.out.println("TaskThread " + threadID + " no affinity.");
+		      }
+		  else
+		      {
+			  System.out.println("TaskThread " + threadID + " set to CPU " + threadID);
+			  Affinity.setCPUAffinity(threadID + cpuAffinity);
+		      }
+//		  String[] eventNames = {"INSTRUCTION_RETIRED:k","UNHALTED_CORE_CYCLES:k"};
+//		  String[] eventNames = {"INSTRUCTION_RETIRED:k","ICACHE:IFDATA_STALL:k"};
+		  String[] eventNames = {"UNHALTED_CORE_CYCLES:k","RESOURCE_STALLS:SB:k"};
+//		  String[] eventNames = {"RESOURCE_STALLS:SB:k","DTLB_STORE_MISSES:WALK_DURATION:k"};
+//		  String[] eventNames = {"LLC_REFERENCES","INSTRUCTION_RETIRED"};
+		  //String[] eventNames = {"INSTRUCTION_RETIRED","INSTRUCTION_RETIRED:k"};
+		  Affinity.createEvents(eventNames);
+
+		  long[] eventBeginVals = new long[3];
+		  long[] eventEndVals = new long[3];
+		  //cerate perf counters
+
+
 			try {
 				startLatch.await();
 			} catch (InterruptedException ie) {
@@ -82,24 +110,38 @@ public class TaskThreads {
 			try {
 				while (!stop.get()) {
 					final Task task = tasks.nextTask();
+					//Affinity.postDequeSignal(task.taskID, 1, threadID);
+
 					if (task == null) {
 						// Done
 						break;
 					}
+					Affinity.postSignal(2, task.taskID, threadID);
 					final long t0 = System.nanoTime();
+					Affinity.readEvents(eventBeginVals);
+
 					try {
 						task.go(indexState);
 					} catch (IOException ioe) {
 						throw new RuntimeException(ioe);
 					}
+					final long t1 = System.nanoTime();
+					Affinity.readEvents(eventEndVals);
 					try {
-						tasks.taskDone(task, t0-task.recvTimeNS, task.totalHitCount);
+					  //					  tasks.taskDone(task, t0-task.recvTimeNS, t1-t0, task.totalHitCount);
+					  RemoteTaskSource rs = (RemoteTaskSource) tasks;
+					  rs.taskReport(task, task.totalHitCount, task.recvTimeNS, t0, t1, eventEndVals[0]-eventBeginVals[0], eventEndVals[1]-eventBeginVals[1]);
+					  //System.out.println("ptime: " + (t0-task.recvTimeNS)/1000 + "ltime: " +  (t1-task.recvTimeNS)/1000);
 					} catch (Exception e) {
-						System.out.println(Thread.currentThread().getName() + ": ignoring exc:");
+					  System.out.println(Thread.currentThread().getName() + ": ignoring exc:");
 						e.printStackTrace();
 					}
-					task.runTimeNanos = System.nanoTime()-t0;
-					task.threadID = threadID;
+					Affinity.postSignal(3, task.taskID, threadID);
+					//					task.runTimeNanos = System.nanoTime()-t0;
+
+					//					Affinity.postSignal(task.taskID, 2, threadID);
+
+					//					System.out.println(task.taskID + ":" + (System.nanoTime() - t1) + ":" + (t1 - t0) + ":" + (t0 - task.recvTimeNS));
 				}
 			} catch (Exception e) {
 				throw new RuntimeException(e);
